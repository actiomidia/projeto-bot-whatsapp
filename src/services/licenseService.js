const https = require('https');
const http = require('http');

class LicenseService {
    constructor() {
        this.apiConfig = {
            baseUrl: process.env.LICENSE_API_URL || 'https://fastwebstories.com.br/apibot/license_api.php',
            apiKey: process.env.LICENSE_API_KEY || 'SUA_CHAVE_SECRETA_SUPER_FORTE_2024',
            timeout: 10000
        };

        this.currentLicense = null;
        this.isValidated = false;
        this.lastApiCheck = null;
        this.validationInProgress = false;
        
        // ‚≠ê CONFIGURA√á√ïES CONSERVADORAS
        this.useLocalFile = true;
        this.realTimeInterval = 300; // ‚≠ê AUMENTADO: Verificar API a cada 5 minutos (antes era 60s)
        this.forceApiCheck = false;
        this.maxApiFailures = 3; // ‚≠ê NOVO: M√°ximo de falhas antes de remover arquivo
        this.currentApiFailures = 0; // ‚≠ê CONTADOR de falhas consecutivas
        this.lastSuccessfulCheck = Date.now(); // ‚≠ê TIMESTAMP da √∫ltima verifica√ß√£o bem-sucedida
        
        this.startPeriodicCheck();
    }

    /**
     * ‚≠ê VERIFICA√á√ÉO PERI√ìDICA MAIS CONSERVADORA
     */
    startPeriodicCheck() {
        setInterval(async () => {
            if (this.currentLicense?.key && !this.validationInProgress) {
                try {
                    console.log('üîÑ Verifica√ß√£o conservadora em tempo real...');
                    await this.validateLicense(this.currentLicense.key);
                } catch (error) {
                    console.error('‚ùå Erro na verifica√ß√£o autom√°tica:', error);
                    // ‚≠ê N√ÉO REMOVER ARQUIVO EM CASO DE ERRO DE REDE
                    this.currentApiFailures++;
                    console.log(`‚ö†Ô∏è Falha ${this.currentApiFailures}/${this.maxApiFailures} na verifica√ß√£o autom√°tica`);
                }
            }
        }, this.realTimeInterval * 1000);
    }

    /**
     * ‚≠ê REQUISI√á√ÉO √Ä API COM TIMEOUT MAIOR
     */
    async makeApiRequest(action, params = {}) {
        return new Promise((resolve, reject) => {
            const url = new URL(this.apiConfig.baseUrl);
            url.searchParams.append('action', action);
            
            for (const [key, value] of Object.entries(params)) {
                url.searchParams.append(key, value);
            }
            
            const isHttps = url.protocol === 'https:';
            const httpModule = isHttps ? https : http;
            
            const options = {
                hostname: url.hostname,
                port: url.port || (isHttps ? 443 : 80),
                path: url.pathname + url.search,
                method: 'GET',
                headers: {
                    'X-API-Key': this.apiConfig.apiKey,
                    'User-Agent': 'WhatsApp-Bot-Client/3.2-Conservative',
                    'Accept': 'application/json'
                }
            };

            console.log(`üîç Verificando licen√ßa na API: GET ${url.href}`);
            
            const req = httpModule.request(options, (res) => {
                let responseData = '';

                console.log(`üì° Status da resposta: ${res.statusCode}`);

                res.on('data', (chunk) => {
                    responseData += chunk;
                });

                res.on('end', () => {
                    console.log('üìÑ Resposta da API:', responseData);
                    
                    if (!responseData.trim()) {
                        reject(new Error('Resposta vazia da API'));
                        return;
                    }
                    
                    try {
                        const jsonResponse = JSON.parse(responseData);
                        resolve(jsonResponse);
                    } catch (parseError) {
                        console.error('‚ùå Erro ao fazer parse da resposta:', parseError);
                        reject(new Error('Resposta inv√°lida da API: ' + parseError.message));
                    }
                });
            });

            req.on('error', (error) => {
                console.error('‚ùå Erro de conex√£o:', error);
                reject(new Error('Erro de conex√£o: ' + error.message));
            });

            req.on('timeout', () => {
                req.destroy();
                reject(new Error('Timeout na conex√£o com a API'));
            });

            // ‚≠ê TIMEOUT MAIOR PARA EVITAR FALHAS DESNECESS√ÅRIAS
            req.setTimeout(this.apiConfig.timeout * 2); // 20 segundos
            req.end();
        });
    }

    /**
     * ‚≠ê VALIDA√á√ÉO CONSERVADORA (TOLERANTE A FALHAS)
     */
    async validateLicense(licenseKey) {
        if (this.validationInProgress) {
            console.log('‚è≥ Valida√ß√£o j√° em andamento...');
            return { valid: this.isValidated, license: this.currentLicense };
        }

        this.validationInProgress = true;

        try {
            console.log(`üîê Validando licen√ßa: ${licenseKey.substring(0, 8)}****`);
            
            const response = await this.makeApiRequest('check', {
                license: licenseKey
            });

            this.lastApiCheck = new Date();

            if (response.success && response.data.valid) {
                const licenseData = response.data.license;
                const status = response.data.status || 'desconhecido';
                
                console.log(`üìä Status da licen√ßa: ${status}`);
                console.log(`üìã Dados recebidos:`, licenseData);
                
                // ‚≠ê VERIFICA√á√ÉO RIGOROSA DE STATUS (APENAS CASOS CLAROS)
                const clearlyInvalidStatuses = ['expirada', 'expired', 'suspended'];
                
                if (clearlyInvalidStatuses.includes(status.toLowerCase())) {
                    console.log(`‚ö†Ô∏è Status claramente inv√°lido: ${status}`);
                    
                    // ‚≠ê S√ì REMOVER ARQUIVO EM CASOS MUITO CLAROS
                    this.currentLicense = null;
                    this.isValidated = false;
                    await this.removeLicenseLocally();
                    
                    return {
                        valid: false,
                        message: `Licen√ßa est√° ${status}. Entre em contato com o suporte.`,
                        status: status
                    };
                }

                // ‚≠ê PARA STATUS AMB√çGUOS (pendente, inativa), SER MAIS TOLERANTE
                if (status.toLowerCase() === 'pendente' || status.toLowerCase() === 'inativa') {
                    console.log(`‚ö†Ô∏è Status amb√≠guo: ${status} - mantendo arquivo local por seguran√ßa`);
                    
                    // ‚≠ê INCREMENTAR CONTADOR MAS N√ÉO REMOVER IMEDIATAMENTE
                    this.currentApiFailures++;
                    
                    if (this.currentApiFailures >= this.maxApiFailures) {
                        console.log(`‚ùå Muitas falhas consecutivas (${this.currentApiFailures}) - removendo arquivo`);
                        
                        this.currentLicense = null;
                        this.isValidated = false;
                        await this.removeLicenseLocally();
                        
                        return {
                            valid: false,
                            message: `Licen√ßa est√° ${status} ap√≥s m√∫ltiplas verifica√ß√µes.`,
                            status: status
                        };
                    } else {
                        console.log(`‚ö†Ô∏è Falha ${this.currentApiFailures}/${this.maxApiFailures} - mantendo arquivo local`);
                        
                        // ‚≠ê MANTER LICEN√áA LOCAL TEMPORARIAMENTE
                        return {
                            valid: true,
                            license: this.currentLicense || licenseData,
                            message: `Status ${status} - usando cache local temporariamente`
                        };
                    }
                }

                // ‚≠ê LICEN√áA V√ÅLIDA - RESETAR CONTADOR DE FALHAS
                this.currentApiFailures = 0;
                this.lastSuccessfulCheck = Date.now();
                
                this.currentLicense = {
                    key: licenseKey,
                    ...licenseData,
                    apiStatus: status,
                    lastCheck: new Date().toISOString(),
                    verifiedAt: new Date().toISOString()
                };
                this.isValidated = true;

                // ‚≠ê SALVAR NO ARQUIVO PARA PERSIST√äNCIA
                await this.saveLicenseLocally(this.currentLicense);

                console.log('‚úÖ Licen√ßa v√°lida confirmada e salva!');
                return {
                    valid: true,
                    license: this.currentLicense,
                    message: response.data.message || 'Licen√ßa v√°lida'
                };
                
            } else {
                console.log('‚ùå Licen√ßa inv√°lida pela API');
                
                // ‚≠ê INCREMENTAR CONTADOR MAS SER CONSERVADOR
                this.currentApiFailures++;
                
                if (this.currentApiFailures >= this.maxApiFailures) {
                    console.log(`‚ùå Muitas respostas inv√°lidas consecutivas - removendo arquivo`);
                    
                    this.currentLicense = null;
                    this.isValidated = false;
                    await this.removeLicenseLocally();
                } else {
                    console.log(`‚ö†Ô∏è Resposta inv√°lida ${this.currentApiFailures}/${this.maxApiFailures} - mantendo arquivo local`);
                    
                    // ‚≠ê SE TEM LICEN√áA LOCAL V√ÅLIDA, MANTER TEMPORARIAMENTE
                    const localLicense = await this.readLicenseFile();
                    if (localLicense && new Date() < new Date(localLicense.expires_at)) {
                        console.log('üíæ Mantendo licen√ßa local v√°lida por seguran√ßa');
                        
                        this.currentLicense = localLicense;
                        this.isValidated = true;
                        
                        return {
                            valid: true,
                            license: localLicense,
                            message: 'Usando licen√ßa local - API inst√°vel'
                        };
                    }
                }
                
                return {
                    valid: false,
                    message: response.message || response.data?.message || 'Licen√ßa inv√°lida'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro ao validar licen√ßa:', error);
            
            // ‚≠ê EM CASO DE ERRO DE REDE, SEMPRE MANTER LICEN√áA LOCAL
            const localLicense = await this.readLicenseFile();
            if (localLicense && new Date() < new Date(localLicense.expires_at)) {
                console.log('üîÑ Erro na API - usando licen√ßa local v√°lida');
                
                this.currentLicense = localLicense;
                this.isValidated = true;
                
                // ‚≠ê INCREMENTAR CONTADOR MAS N√ÉO REMOVER POR ERRO DE REDE
                this.currentApiFailures++;
                console.log(`‚ö†Ô∏è Erro de rede ${this.currentApiFailures}/${this.maxApiFailures} - mantendo arquivo`);
                
                return {
                    valid: true,
                    license: localLicense,
                    message: 'Usando licen√ßa local (erro na API)'
                };
            }
            
            this.currentLicense = null;
            this.isValidated = false;
            
            return {
                valid: false,
                message: 'Erro ao conectar com o servidor de licen√ßas: ' + error.message
            };
        } finally {
            this.validationInProgress = false;
        }
    }

    /**
     * ‚≠ê VERIFICA√á√ÉO INTELIGENTE E CONSERVADORA
     */
    async checkLocalLicense() {
        try {
            // ‚≠ê PRIMEIRO: VERIFICAR ARQUIVO LOCAL
            const localLicense = await this.readLicenseFile();
            
            if (!localLicense) {
                console.log('üì≠ Nenhuma licen√ßa local encontrada');
                return { valid: false, message: 'Nenhuma licen√ßa local encontrada' };
            }

            console.log(`üìÇ Licen√ßa local encontrada: ${localLicense.key?.substring(0, 8)}****`);

            // ‚≠ê VERIFICAR SE N√ÉO EXPIROU LOCALMENTE
            const now = new Date();
            const expiresAt = new Date(localLicense.expires_at);
            
            if (now > expiresAt) {
                console.log('‚è∞ Licen√ßa local expirada - removendo');
                await this.removeLicenseLocally();
                return { valid: false, message: 'Licen√ßa local expirada' };
            }

            // ‚≠ê VERIFICAR SE PRECISA CONSULTAR API (MAIS CONSERVADOR)
            const lastCheck = new Date(localLicense.lastCheck || 0);
            const minutesSinceCheck = (now - lastCheck) / (1000 * 60);
            
            // ‚≠ê S√ì VERIFICAR API SE:
            // 1. For√ßado manualmente
            // 2. Nunca verificou
            // 3. Passou MUITO tempo (5 minutos ao inv√©s de 1)
            const shouldCheckApi = this.forceApiCheck || 
                                  !localLicense.lastCheck || 
                                  minutesSinceCheck > (this.realTimeInterval / 60);

            if (shouldCheckApi) {
                console.log(`üîÑ Verifica√ß√£o na API necess√°ria (${Math.round(minutesSinceCheck)} min desde √∫ltima verifica√ß√£o)`);
                
                const validation = await this.validateLicense(localLicense.key);
                
                // Resetar flag de for√ßa
                this.forceApiCheck = false;
                
                return validation;
            } else {
                console.log(`‚ö° Usando cache local (${Math.round(minutesSinceCheck)} min atr√°s)`);
                
                // ‚≠ê USAR LICEN√áA LOCAL SEM VERIFICAR API
                this.currentLicense = localLicense;
                this.isValidated = true;
                
                return { valid: true, license: localLicense };
            }

        } catch (error) {
            console.error('‚ùå Erro ao verificar licen√ßa local:', error);
            return { valid: false, message: 'Erro ao verificar licen√ßa local' };
        }
    }

    /**
     * ‚≠ê LER ARQUIVO DE LICEN√áA
     */
    async readLicenseFile() {
        try {
            const fs = require('fs').promises;
            const path = require('path');
            const licenseFile = path.join(__dirname, '..', '..', '.license');

            const data = await fs.readFile(licenseFile, 'utf8');
            return JSON.parse(data);
        } catch (error) {
            return null;
        }
    }

    /**
     * ‚≠ê SALVAR LICEN√áA LOCAL (ARQUIVO + MEM√ìRIA)
     */
    async saveLicenseLocally(licenseData) {
        try {
            // ‚≠ê SALVAR EM MEM√ìRIA
            this.currentLicense = {
                ...licenseData,
                lastCheck: new Date().toISOString(),
                savedAt: new Date().toISOString(),
                apiFailures: this.currentApiFailures // ‚≠ê SALVAR CONTADOR
            };

            // ‚≠ê SALVAR EM ARQUIVO
            const fs = require('fs').promises;
            const path = require('path');
            const licenseFile = path.join(__dirname, '..', '..', '.license');

            await fs.writeFile(licenseFile, JSON.stringify(this.currentLicense, null, 2));
            console.log('üíæ Licen√ßa salva em mem√≥ria e arquivo');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao salvar licen√ßa:', error);
            return false;
        }
    }

    /**
     * ‚≠ê REMOVER LICEN√áA (APENAS EM CASOS EXTREMOS)
     */
    async removeLicenseLocally() {
        try {
            console.log('üóëÔ∏è Removendo licen√ßa ap√≥s confirma√ß√£o de invalidade...');
            
            // ‚≠ê LIMPAR MEM√ìRIA
            this.currentLicense = null;
            this.isValidated = false;
            this.currentApiFailures = 0; // ‚≠ê RESETAR CONTADOR
            
            // ‚≠ê REMOVER ARQUIVO
            const fs = require('fs').promises;
            const path = require('path');
            const licenseFile = path.join(__dirname, '..', '..', '.license');

            try {
                await fs.unlink(licenseFile);
                console.log('üóëÔ∏è Arquivo .license removido ap√≥s confirma√ß√£o');
            } catch (e) {
                // Arquivo n√£o existe, tudo bem
            }

            console.log('üßπ Licen√ßa removida completamente');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao remover licen√ßa:', error);
            return false;
        }
    }

    /**
     * ‚≠ê LIMPEZA COMPLETA (APENAS MANUAL)
     */
    async clearAllCache() {
        console.log('üßπ Limpando todos os caches manualmente...');
        
        this.currentLicense = null;
        this.isValidated = false;
        this.lastApiCheck = null;
        this.forceApiCheck = false;
        this.currentApiFailures = 0; // ‚≠ê RESETAR CONTADOR
        
        await this.removeLicenseLocally();
        
        console.log('‚úÖ Cache limpo completamente');
    }

    /**
     * ‚≠ê FOR√áAR VERIFICA√á√ÉO NA API (RESETAR CONTADOR)
     */
    forceApiValidation() {
        this.forceApiCheck = true;
        this.currentApiFailures = 0; // ‚≠ê RESETAR CONTADOR AO FOR√áAR
        console.log('üîÑ For√ßando verifica√ß√£o na API...');
    }

    /**
     * Verifica se a licen√ßa est√° ativa
     */
    isLicenseValid() {
        return this.isValidated && this.currentLicense !== null;
    }

    /**
     * Obt√©m informa√ß√µes da licen√ßa atual
     */
    getCurrentLicense() {
        return this.currentLicense;
    }

    /**
     * Desativa licen√ßa
     */
    async deactivateLicense() {
        console.log('üîÑ Desativando licen√ßa manualmente...');
        await this.clearAllCache();
        return true;
    }

    /**
     * Testa conex√£o com a API
     */
    async testApiConnection() {
        try {
            const response = await this.makeApiRequest('status');
            return response.success;
        } catch (error) {
            console.error('‚ùå Erro ao testar API:', error);
            return false;
        }
    }

    /**
     * ‚≠ê MIDDLEWARE COM VERIFICA√á√ÉO CONSERVADORA
     */
    requireValidLicense() {
        return async (req, res, next) => {
            try {
                console.log('üîê Verifica√ß√£o conservadora de licen√ßa para rota:', req.path);
                
                const licenseCheck = await this.checkLocalLicense();
                
                if (!licenseCheck.valid) {
                    console.log('‚ùå Acesso negado para rota:', req.path);
                    return res.status(401).json({
                        success: false,
                        message: licenseCheck.message || 'Licen√ßa inv√°lida ou expirada',
                        requireLicense: true,
                        timestamp: new Date().toISOString()
                    });
                }
                
                console.log('‚úÖ Acesso autorizado para rota:', req.path);
                next();
                
            } catch (error) {
                console.error('‚ùå Erro na verifica√ß√£o de licen√ßa:', error);
                return res.status(500).json({
                    success: false,
                    message: 'Erro interno na verifica√ß√£o de licen√ßa',
                    requireLicense: true
                });
            }
        };
    }

    /**
     * Obt√©m estat√≠sticas da API
     */
    async getApiStatus() {
        try {
            const response = await this.makeApiRequest('status');
            return response.success ? response.data : null;
        } catch (error) {
            console.error('‚ùå Erro ao obter status da API:', error);
            return null;
        }
    }

    /**
     * Verifica status atual
     */
    async checkCurrentStatus() {
        if (!this.currentLicense?.key) {
            return { 
                valid: false, 
                message: 'Nenhuma licen√ßa carregada' 
            };
        }

        console.log('üîÑ Verificando status atual na API...');
        return await this.validateLicense(this.currentLicense.key);
    }

    /**
     * Obter ID da m√°quina
     */
    getMachineId() {
        const os = require('os');
        const crypto = require('crypto');
        
        const machineData = [
            os.hostname(),
            os.platform(),
            os.arch(),
            os.userInfo().username
        ].join('|');
        
        return crypto.createHash('md5').update(machineData).digest('hex');
    }

    /**
     * Fechar conex√µes
     */
    async close() {
        console.log('üîå Limpando servi√ßo de licen√ßas...');
        this.currentLicense = null;
        this.isValidated = false;
        this.lastApiCheck = null;
    }
}

module.exports = new LicenseService();
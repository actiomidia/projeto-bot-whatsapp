const whatsappService = require('../services/whatsappService');

class WhatsAppController {
    async sendMessage(req, res) {
        try {
            console.log('üì® Controller: sendMessage chamado');
            const { number, message } = req.body;

            if (!number || !message) {
                return res.status(400).json({
                    success: false,
                    error: 'N√∫mero e mensagem s√£o obrigat√≥rios'
                });
            }

            const result = await whatsappService.sendMessage(number, message);
            res.json(result);
        } catch (error) {
            console.error('‚ùå Erro no controller sendMessage:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async sendBulkMessages(req, res) {
        try {
            console.log('üìä Controller: sendBulkMessages chamado');
            const { numbers, message, delay, stopOnError } = req.body;

            if (!numbers || !Array.isArray(numbers) || numbers.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Lista de n√∫meros √© obrigat√≥ria'
                });
            }

            if (!message) {
                return res.status(400).json({
                    success: false,
                    error: 'Mensagem √© obrigat√≥ria'
                });
            }

            // Limitar quantidade de n√∫meros por vez
            if (numbers.length > 100) {
                return res.status(400).json({
                    success: false,
                    error: 'M√°ximo de 100 n√∫meros por vez'
                });
            }

            // Iniciar envio em massa (n√£o aguardar conclus√£o)
            whatsappService.sendBulkMessages(numbers, message, {
                delay: delay || 3000,
                stopOnError: stopOnError || false
            });

            res.json({
                success: true,
                message: 'Envio em massa iniciado',
                total: numbers.length
            });
        } catch (error) {
            console.error('‚ùå Erro no controller sendBulkMessages:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async getStatus(req, res) {
        try {
            console.log('üìä Controller: getStatus chamado');
            const status = whatsappService.getConnectionStatus();
            res.json({
                success: true,
                ...status
            });
        } catch (error) {
            console.error('‚ùå Erro no controller getStatus:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async logout(req, res) {
        try {
            console.log('üö™ Controller: logout chamado');
            await whatsappService.logout();
            res.json({
                success: true,
                message: 'Logout realizado com sucesso'
            });
        } catch (error) {
            console.error('‚ùå Erro no controller logout:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async getInfo(req, res) {
        try {
            console.log('‚ÑπÔ∏è Controller: getInfo chamado');
            const info = await whatsappService.getInfo();
            res.json({
                success: true,
                info
            });
        } catch (error) {
            console.error('‚ùå Erro no controller getInfo:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async getGroups(req, res) {
        try {
            console.log('üë• Controller: getGroups chamado');
            console.log('üîç Headers recebidos:', req.headers);
            console.log('üîç M√©todo:', req.method);
            console.log('üîç URL:', req.url);
            
            // ‚≠ê VERIFICAR SE O WHATSAPP EST√Å CONECTADO
            if (!whatsappService.isReady) {
                console.log('‚ùå WhatsApp n√£o est√° conectado');
                return res.status(400).json({
                    success: false,
                    error: 'WhatsApp n√£o est√° conectado'
                });
            }

            console.log('‚úÖ WhatsApp est√° conectado - buscando grupos...');
            const groups = await whatsappService.getGroups();
            
            console.log(`‚úÖ Grupos encontrados: ${groups.length}`);
            
            res.json({
                success: true,
                groups,
                count: groups.length
            });
        } catch (error) {
            console.error('‚ùå Erro no controller getGroups:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async sendToGroup(req, res) {
        try {
            console.log('üë• Controller: sendToGroup chamado');
            const { groupId, message } = req.body;

            if (!groupId || !message) {
                return res.status(400).json({
                    success: false,
                    error: 'ID do grupo e mensagem s√£o obrigat√≥rios'
                });
            }

            const result = await whatsappService.sendMessageToGroup(groupId, message);
            res.json(result);
        } catch (error) {
            console.error('‚ùå Erro no controller sendToGroup:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async sendToMultipleGroups(req, res) {
        try {
            console.log('üë• Controller: sendToMultipleGroups chamado');
            const { groupIds, message, delay, stopOnError } = req.body;

            if (!groupIds || !Array.isArray(groupIds) || groupIds.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Lista de IDs de grupos √© obrigat√≥ria'
                });
            }

            if (!message) {
                return res.status(400).json({
                    success: false,
                    error: 'Mensagem √© obrigat√≥ria'
                });
            }

            // Limitar quantidade de grupos por vez
            if (groupIds.length > 50) {
                return res.status(400).json({
                    success: false,
                    error: 'M√°ximo de 50 grupos por vez'
                });
            }

            // Iniciar envio para grupos (n√£o aguardar conclus√£o)
            whatsappService.sendToMultipleGroups(groupIds, message, {
                delay: delay || 3000,
                stopOnError: stopOnError || false
            });

            res.json({
                success: true,
                message: 'Envio para grupos iniciado',
                total: groupIds.length
            });
        } catch (error) {
            console.error('‚ùå Erro no controller sendToMultipleGroups:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    async getGroupInfo(req, res) {
        try {
            console.log('üë• Controller: getGroupInfo chamado');
            const { groupId } = req.params;

            if (!groupId) {
                return res.status(400).json({
                    success: false,
                    error: 'ID do grupo √© obrigat√≥rio'
                });
            }

            const info = await whatsappService.getGroupInfo(groupId);
            res.json({
                success: true,
                info
            });
        } catch (error) {
            console.error('‚ùå Erro no controller getGroupInfo:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
}

module.exports = new WhatsAppController();